type: edu
files:
  - name: easyrider/easyrider.py
    visible: true
    text: '# Write your code here'
    learner_created: false
  - name: test/__init__.py
    visible: false
    learner_created: false
  - name: test/tests.py
    visible: false
    text: |
      from hstest.stage_test import *
      from hstest.test_case import TestCase
      import re
      
      
      class EasyRiderStage3(StageTest):
          def generate(self) -> List[TestCase]:
              return [
                  TestCase(
                      stdin='[{"bus_id" : 128, "stop_id" : 1, "stop_name" : "Prospekt Avenue", "next_stop" : 3, "stop_type" : "S", "a_time" : "08:12"}, '
                            '{"bus_id" : 128, "stop_id" : 3, "stop_name" : "Elm Street", "next_stop" : 5, "stop_type" : "", "a_time" : "08:19"}, '
                            '{"bus_id" : 128, "stop_id" : 5, "stop_name" : "Fifth Avenue", "next_stop" : 7, "stop_type" : "O", "a_time" : "08:25"}, '
                            '{"bus_id" : 128, "stop_id" : 7, "stop_name" : "Sesame Street", "next_stop" : 0, "stop_type" : "F", "a_time" : "08:37"}, '
                            '{"bus_id" : 256, "stop_id" : 2, "stop_name" : "Pilotow Street", "next_stop" : 3, "stop_type" : "S", "a_time" : "09:20"}, '
                            '{"bus_id" : 256, "stop_id" : 3, "stop_name" : "Elm Street", "next_stop" : 6, "stop_type" : "", "a_time" : "09:45"}, '
                            '{"bus_id" : 256, "stop_id" : 6, "stop_name" : "Sunset Boulevard", "next_stop" : 7, "stop_type" : "", "a_time" : "09:59"}, '
                            '{"bus_id" : 256, "stop_id" : 7, "stop_name" : "Sesame Street", "next_stop" : 0, "stop_type" : "F", "a_time" : "10:12"}, '
                            '{"bus_id" : 512, "stop_id" : 4, "stop_name" : "Bourbon Street", "next_stop" : 6, "stop_type" : "S", "a_time" : "08:13"}, '
                            '{"bus_id" : 512, "stop_id" : 6, "stop_name" : "Sunset Boulevard", "next_stop" : 0, "stop_type" : "F", "a_time" : "08:16"}]',
                      attach=((128, 256, 512), (4, 4, 2), 3)),
                  TestCase(
                      stdin='[{"bus_id" : 128, "stop_id" : 1, "stop_name" : "Fifth Avenue", "next_stop" : 4, "stop_type" : "S", "a_time" : "08:12"}, '
                            '{"bus_id" : 128, "stop_id" : 4, "stop_name" : "Abbey Road", "next_stop" : 5, "stop_type" : "", "a_time" : "08:19"},  '
                            '{"bus_id" : 128, "stop_id" : 5, "stop_name" : "Santa Monica Boulevard", "next_stop" : 8, "stop_type" : "O", "a_time" : "08:25"},  '
                            '{"bus_id" : 128, "stop_id" : 8, "stop_name" : "Elm Street", "next_stop" : 11, "stop_type" : "", "a_time" : "08:37"},  '
                            '{"bus_id" : 128, "stop_id" : 11, "stop_name" : "Beale Street", "next_stop" : 12, "stop_type" : "", "a_time" : "09:20"},  '
                            '{"bus_id" : 128, "stop_id" : 12, "stop_name" : "Sesame Street", "next_stop" : 14, "stop_type" : "", "a_time" : "09:45"},  '
                            '{"bus_id" : 128, "stop_id" : 14, "stop_name" : "Bourbon Street", "next_stop" : 19, "stop_type" : "O", "a_time" : "09:59"},  '
                            '{"bus_id" : 128, "stop_id" : 19, "stop_name" : "Prospekt Avenue", "next_stop" : 0, "stop_type" : "F", "a_time" : "10:12"},  '
                            '{"bus_id" : 256, "stop_id" : 2, "stop_name" : "Pilotow Street", "next_stop" : 3, "stop_type" : "S", "a_time" : "08:13"},  '
                            '{"bus_id" : 256, "stop_id" : 3, "stop_name" : "Startowa Street", "next_stop" : 8, "stop_type" : "", "a_time" : "08:16"},  '
                            '{"bus_id" : 256, "stop_id" : 8, "stop_name" : "Elm Street", "next_stop" : 10, "stop_type" : "", "a_time" : "08:29"},  '
                            '{"bus_id" : 256, "stop_id" : 10, "stop_name" : "Lombard Street", "next_stop" : 12, "stop_type" : "", "a_time" : "08:44"},  '
                            '{"bus_id" : 256, "stop_id" : 12, "stop_name" : "Sesame Street", "next_stop" : 13, "stop_type" : "O", "a_time" : "08:46"},  '
                            '{"bus_id" : 256, "stop_id" : 13, "stop_name" : "Orchard Road", "next_stop" : 16, "stop_type" : "", "a_time" : "09:13"}, '
                            '{"bus_id" : 256, "stop_id" : 16, "stop_name" : "Sunset Boulevard", "next_stop" : 17, "stop_type" : "O", "a_time" : "09:26"},  '
                            '{"bus_id" : 256, "stop_id" : 17, "stop_name" : "Khao San Road", "next_stop" : 20, "stop_type" : "O", "a_time" : "10:25"},  '
                            '{"bus_id" : 256, "stop_id" : 20, "stop_name" : "Michigan Avenue", "next_stop" : 0, "stop_type" : "F", "a_time" : "11:26"},  '
                            '{"bus_id" : 512, "stop_id" : 6, "stop_name" : "Arlington Road", "next_stop" : 7, "stop_type" : "S", "a_time" : "11:06"},  '
                            '{"bus_id" : 512, "stop_id" : 7, "stop_name" : "Parizska Street", "next_stop" : 8, "stop_type" : "", "a_time" : "11:15"},  '
                            '{"bus_id" : 512, "stop_id" : 8, "stop_name" : "Elm Street", "next_stop" : 9, "stop_type" : "", "a_time" : "11:56"},  '
                            '{"bus_id" : 512, "stop_id" : 9, "stop_name" : "Niebajka Avenue", "next_stop" : 15, "stop_type" : "", "a_time" : "12:20"},  '
                            '{"bus_id" : 512, "stop_id" : 15, "stop_name" : "Jakis Street", "next_stop" : 16, "stop_type" : "", "a_time" : "12:44"},  '
                            '{"bus_id" : 512, "stop_id" : 16, "stop_name" : "Sunset Boulevard", "next_stop" : 18, "stop_type" : "", "a_time" : "13:01"},  '
                            '{"bus_id" : 512, "stop_id" : 18, "stop_name" : "Jakas Avenue", "next_stop" : 19, "stop_type" : "", "a_time" : "14:00"},  '
                            '{"bus_id" : 1024, "stop_id" : 21, "stop_name" : "Karlikowska Avenue", "next_stop" : 12, "stop_type" : "S", "a_time" : "13:01"},  '
                            '{"bus_id" : 1024, "stop_id" : 12, "stop_name" : "Sesame Street", "next_stop" : 0, "stop_type" : "F", "a_time" : "14:00"},  '
                            '{"bus_id" : 512, "stop_id" : 19, "stop_name" : "Prospekt Avenue", "next_stop" : 0, "stop_type" : "F", "a_time" : "14:11"}]',
                      attach=((128, 256, 512, 1024), (8, 9, 8, 2), 4)),
              ]
      
          def check(self, reply: str, result) -> CheckResult:
              for x in range(result[2]):
                  query = str(result[0][x]) + "[\\D]*" + str(result[1][x])
                  if not re.search(rf'{query}', reply.strip()):
                      if result[2] == 3:
                          return CheckResult.wrong("Wrong number of stops detected. Expected output:\n\n"
                                                   "Line names and number of stops:\n"
                                                   f"bus_id: {result[0][0]}, stops: {result[1][0]}\n"
                                                   f"bus_id: {result[0][1]}, stops: {result[1][1]}\n"
                                                   f"bus_id: {result[0][2]}, stops: {result[1][2]}")
                      else:
                          return CheckResult.wrong("Wrong number of stops detected. Expected output:\n\n"
                                                   "Line names and number of stops:\n"
                                                   f"bus_id: {result[0][0]}, stops: {result[1][0]}\n"
                                                   f"bus_id: {result[0][1]}, stops: {result[1][1]}\n"
                                                   f"bus_id: {result[0][2]}, stops: {result[1][2]}\n"
                                                   f"bus_id: {result[0][3]}, stops: {result[1][3]}")
              return CheckResult.correct()
      
      
      if __name__ == '__main__':
          EasyRiderStage3('easyrider.easyrider').run_tests()
    learner_created: false
  - name: tests.py
    visible: false
    text: |-
      from test.tests import EasyRiderStage3
      
      if __name__ == '__main__':    EasyRiderStage3('easyrider.easyrider').run_tests()
    learner_created: false
  - name: easyrider/utils.py
    visible: true
    text: |
      import re
      import json
      from collections import defaultdict
      
      
      def match_regex(template: re.Pattern[str], given_str: str) -> bool:
          match = re.search(template, given_str)
          if match:
              return True
          return False
      
      
      class Validator:
          BUS_ID_REGEX = ""
          STOP_ID_REGEX = ""
          STOP_NAME_REGEX = re.compile(r"[A-Z].* \b(?:Road|Avenue|Boulevard|Street)\b$", flags=re.ASCII)
          NEXT_STOP_REGEX = ""
          STOP_TYPE_REGEX = re.compile(r"^[SOF]{1}$", flags=re.ASCII)
          A_TIME_REGEX = re.compile(r"^([0-1]{1}[0-9]|2[0-3]):[0-5][0-9]$", flags=re.ASCII)
      
          def __init__(self, json_data: str):
              self.raw_json = json_data
              self.json: list = json.loads(self.raw_json)
              (self.bus_ids,
               self.stop_ids,
               self.stop_names,
               self.next_stops,
               self.stop_types,
               self.a_times) = self.extract_fields()
      
              self.errors = defaultdict(lambda: defaultdict(int))
      
          def extract_fields(self):
              return (
                  [(idx, val["bus_id"]) for idx, val in enumerate(self.json)],
                  [(idx, val["stop_id"]) for idx, val in enumerate(self.json)],
                  [(idx, val["stop_name"]) for idx, val in enumerate(self.json)],
                  [(idx, val["next_stop"]) for idx, val in enumerate(self.json)],
                  [(idx, val["stop_type"]) for idx, val in enumerate(self.json)],
                  [(idx, val["a_time"]) for idx, val in enumerate(self.json)]
              )
      
          def validate_fields(self):
              self.bus_id_validator()
              self.stop_id_validator()
              self.stop_name_validator()
              self.next_stop_validator()
              self.stop_type_validator()
              self.a_time_validator()
      
          def report_errors(self, format_errors: False):
              total_type_errors = sum([v["type"] for v in self.errors.values()])
              total_required_errors = sum([v["required"] for v in self.errors.values()])
              total_format_errors = sum([v["format"] for v in self.errors.values()])
      
              field_errors = defaultdict(int)
      
              for k, v in self.errors.items():
                  field_errors[k] = sum([v["type"], v["required"]])
      
              if format_errors:
                  print(f"""
      Format validation: {total_format_errors} errors
      stop_name: {self.errors["stop_name"]["format"]}
      stop_type: {self.errors["stop_type"]["format"]}
      a_time: {self.errors["a_time"]["format"]}""")
      
              else:
                  print(f"""
      Type and required field validation: {total_type_errors + total_required_errors} errors
      bus_id: {field_errors["bus_id"]}
      stop_id: {field_errors["stop_id"]}
      stop_name: {field_errors["stop_name"]}
      next_stop: {field_errors["next_stop"]}
      stop_type: {field_errors["stop_type"]}
      a_time: {field_errors["a_time"]}""")
      
          # field/db column validators
          def bus_id_validator(self):
              # integer
              for val in self.bus_ids:
                  if val[1] and not isinstance(val[1], int):
                      self.errors["bus_id"]["type"] += 1
      
                  if val[1] == "":
                      self.errors["bus_id"]["required"] += 1
      
          def stop_id_validator(self):
              # integer
              for val in self.stop_ids:
                  if val[1] and not isinstance(val[1], int):
                      self.errors["stop_id"]["type"] += 1
      
                  if val[1] == "":
                      self.errors["stop_id"]["required"] += 1
      
          def stop_name_validator(self):
              # string
              for val in self.stop_names:
                  # field errors
                  if val[1] and not isinstance(val[1], str):
                      self.errors["stop_name"]["type"] += 1
      
                  if val[1] == "":
                      self.errors["stop_name"]["required"] += 1
      
                  # format errors
                  stop_name_match = match_regex(template=Validator.STOP_NAME_REGEX, given_str=val[1])
                  if not stop_name_match:
                      self.errors["stop_name"]["format"] += 1
      
          def next_stop_validator(self):
              # integer
              for val in self.next_stops:
                  if val[1] and not isinstance(val[1], int):
                      self.errors["next_stop"]["type"] += 1
      
                  if val[1] == "":
                      self.errors["next_stop"]["required"] += 1
      
          def stop_type_validator(self):
              # char (string of len 1)
              for val in self.stop_types:
                  if val[1]:
                      # field type errors
                      if (not isinstance(val[1], str)) or (isinstance(val[1], str) and len(val[1]) != 1):
                          self.errors["stop_type"]["type"] += 1
      
                      # format errors
                      stop_type_match = match_regex(template=Validator.STOP_TYPE_REGEX, given_str=val[1])
                      if not stop_type_match:
                          self.errors["stop_type"]["format"] += 1
      
          def a_time_validator(self):
              # string
              for val in self.a_times:
                  if val[1] and not isinstance(val[1], str):
                      self.errors["a_time"]["type"] += 1
      
                  if val[1] == "":
                      self.errors["a_time"]["required"] += 1
      
                  # format errors
                  a_time_match = match_regex(template=Validator.A_TIME_REGEX, given_str=val[1])
                  if not a_time_match:
                      self.errors["a_time"]["format"] += 1
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/10890#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 26 Dec 2023 03:27:52 UTC"
record: -1
