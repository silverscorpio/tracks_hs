type: edu
files:
  - name: easyrider/easyrider.py
    visible: true
    text: '# Write your code here'
    learner_created: false
  - name: test/__init__.py
    visible: false
    learner_created: false
  - name: test/tests.py
    visible: false
    text: "from hstest.stage_test import *\nfrom hstest.test_case import TestCase\n\
    import re\n\n\nclass EasyRiderStage2(StageTest):\n    def generate(self) -> List[TestCase]:\n\
    \        return [\n            TestCase(stdin='[{\"bus_id\" : 128, \"stop_id\"\
    \ : 1, \"stop_name\" : \"Prospekt Av.\", \"next_stop\" : 3, \"stop_type\" : \"\
    S\", \"a_time\" : \"08:12\"}, '\n                           '{\"bus_id\" : 128,\
    \ \"stop_id\" : 3, \"stop_name\" : \"Elm Street\", \"next_stop\" : 5, \"stop_type\"\
    \ : \"\", \"a_time\" : \"8:19\"}, '\n                           '{\"bus_id\" :\
    \ 128, \"stop_id\" : 5, \"stop_name\" : \"Fifth Avenue\", \"next_stop\" : 7, \"\
    stop_type\" : \"OO\", \"a_time\" : \"08:25\"}, '\n                           '{\"\
    bus_id\" : 128, \"stop_id\" : 7, \"stop_name\" : \"Sesame Street\", \"next_stop\"\
    \ : 0, \"stop_type\" : \"F\", \"a_time\" : \"08:77\"}, '\n                   \
    \        '{\"bus_id\" : 256, \"stop_id\" : 2, \"stop_name\" : \"Pilotow Street\"\
    , \"next_stop\" : 3, \"stop_type\" : \"S\", \"a_time\" : \"09:20\"}, '\n     \
    \                      '{\"bus_id\" : 256, \"stop_id\" : 3, \"stop_name\" : \"\
    Elm\", \"next_stop\" : 6, \"stop_type\" : \"\", \"a_time\" : \"09:45\"}, '\n \
    \                          '{\"bus_id\" : 256, \"stop_id\" : 6, \"stop_name\"\
    \ : \"Sunset Boulevard\", \"next_stop\" : 7, \"stop_type\" : \"A\", \"a_time\"\
    \ : \"09:59\"}, '\n                           '{\"bus_id\" : 256, \"stop_id\"\
    \ : 7, \"stop_name\" : \"Sesame Street\", \"next_stop\" : 0, \"stop_type\" : \"\
    F\", \"a_time\" : \"10.12\"}, '\n                           '{\"bus_id\" : 512,\
    \ \"stop_id\" : 4, \"stop_name\" : \"bourbon street\", \"next_stop\" : 6, \"stop_type\"\
    \ : \"S\", \"a_time\" : \"38:13\"}, '\n                           '{\"bus_id\"\
    \ : 512, \"stop_id\" : 6, \"stop_name\" : \"Sunset Boulevard\", \"next_stop\"\
    \ : 0, \"stop_type\" : \"F\", \"a_time\" : \"08:16\"}]',\n                   \
    \  attach=(9, 3, 2, 4)),\n            TestCase(stdin='[{\"bus_id\" : 128, \"stop_id\"\
    \ : 1, \"stop_name\" : \"Fifth Avenue\", \"next_stop\" : 4, \"stop_type\" : \"\
    S\", \"a_time\" : \"08:12\"}, '\n                           '{\"bus_id\" : 128,\
    \ \"stop_id\" : 4, \"stop_name\" : \"Abbey Road\", \"next_stop\" : 5, \"stop_type\"\
    \ : \"\", \"a_time\" : \"08:19\"},  '\n                           '{\"bus_id\"\
    \ : 128, \"stop_id\" : 5, \"stop_name\" : \"Santa Monica Boulevard\", \"next_stop\"\
    \ : 8, \"stop_type\" : \"O\", \"a_time\" : \"08:25\"},  '\n                  \
    \         '{\"bus_id\" : 128, \"stop_id\" : 8, \"stop_name\" : \"Elm Street\"\
    , \"next_stop\" : 11, \"stop_type\" : \"\", \"a_time\" : \"08:37\"},  '\n    \
    \                       '{\"bus_id\" : 128, \"stop_id\" : 11, \"stop_name\" :\
    \ \"Beale Street\", \"next_stop\" : 12, \"stop_type\" : \"\", \"a_time\" : \"\
    09:20\"},  '\n                           '{\"bus_id\" : 128, \"stop_id\" : 12,\
    \ \"stop_name\" : \"Sesame Street\", \"next_stop\" : 14, \"stop_type\" : \"\"\
    , \"a_time\" : \"09:45\"},  '\n                           '{\"bus_id\" : 128,\
    \ \"stop_id\" : 14, \"stop_name\" : \"Bourbon Street\", \"next_stop\" : 19, \"\
    stop_type\" : \"O\", \"a_time\" : \"09:59\"},  '\n                           '{\"\
    bus_id\" : 128, \"stop_id\" : 19, \"stop_name\" : \"Prospekt Avenue\", \"next_stop\"\
    \ : 0, \"stop_type\" : \"F\", \"a_time\" : \"10:12\"},  '\n                  \
    \         '{\"bus_id\" : 256, \"stop_id\" : 2, \"stop_name\" : \"Pilotow Street\"\
    , \"next_stop\" : 3, \"stop_type\" : \"S\", \"a_time\" : \"08:13\"},  '\n    \
    \                       '{\"bus_id\" : 256, \"stop_id\" : 3, \"stop_name\" : \"\
    Startowa Street\", \"next_stop\" : 8, \"stop_type\" : \"\", \"a_time\" : \"08:16\"\
    },  '\n                           '{\"bus_id\" : 256, \"stop_id\" : 8, \"stop_name\"\
    \ : \"Elm Street\", \"next_stop\" : 10, \"stop_type\" : \"\", \"a_time\" : \"\
    08:29\"},  '\n                           '{\"bus_id\" : 256, \"stop_id\" : 10,\
    \ \"stop_name\" : \"Lombard Street\", \"next_stop\" : 12, \"stop_type\" : \"\"\
    , \"a_time\" : \"08:44\"},  '\n                           '{\"bus_id\" : 256,\
    \ \"stop_id\" : 12, \"stop_name\" : \"Sesame Street\", \"next_stop\" : 13, \"\
    stop_type\" : \"O\", \"a_time\" : \"08:46\"},  '\n                           '{\"\
    bus_id\" : 256, \"stop_id\" : 13, \"stop_name\" : \"Orchard Road\", \"next_stop\"\
    \ : 16, \"stop_type\" : \"\", \"a_time\" : \"09:13\"},  '\n                  \
    \         '{\"bus_id\" : 256, \"stop_id\" : 16, \"stop_name\" : \"Sunset Boulevard\"\
    , \"next_stop\" : 17, \"stop_type\" : \"O\", \"a_time\" : \"09:26\"},  '\n   \
    \                        '{\"bus_id\" : 256, \"stop_id\" : 17, \"stop_name\" :\
    \ \"Khao San Road\", \"next_stop\" : 20, \"stop_type\" : \"O\", \"a_time\" : \"\
    10:25\"},  '\n                           '{\"bus_id\" : 256, \"stop_id\" : 20,\
    \ \"stop_name\" : \"Michigan Avenue\", \"next_stop\" : 0, \"stop_type\" : \"F\"\
    , \"a_time\" : \"11:26\"},  '\n                           '{\"bus_id\" : 512,\
    \ \"stop_id\" : 6, \"stop_name\" : \"Arlington Road\", \"next_stop\" : 7, \"stop_type\"\
    \ : \"S\", \"a_time\" : \"11:06\"},  '\n                           '{\"bus_id\"\
    \ : 512, \"stop_id\" : 7, \"stop_name\" : \"Parizska Street\", \"next_stop\" :\
    \ 8, \"stop_type\" : \"\", \"a_time\" : \"11:15\"},  '\n                     \
    \      '{\"bus_id\" : 512, \"stop_id\" : 8, \"stop_name\" : \"Elm Street\", \"\
    next_stop\" : 9, \"stop_type\" : \"\", \"a_time\" : \"11:56\"},  '\n         \
    \                  '{\"bus_id\" : 512, \"stop_id\" : 9, \"stop_name\" : \"Niebajka\
    \ Avenue\", \"next_stop\" : 15, \"stop_type\" : \"\", \"a_time\" : \"12:20\"},\
    \  '\n                           '{\"bus_id\" : 512, \"stop_id\" : 15, \"stop_name\"\
    \ : \"Jakis Street\", \"next_stop\" : 16, \"stop_type\" : \"\", \"a_time\" : \"\
    12:44\"},  '\n                           '{\"bus_id\" : 512, \"stop_id\" : 16,\
    \ \"stop_name\" : \"Sunset Boulevard\", \"next_stop\" : 18, \"stop_type\" : \"\
    \", \"a_time\" : \"13:01\"},  '\n                           '{\"bus_id\" : 512,\
    \ \"stop_id\" : 18, \"stop_name\" : \"Jakas Avenue\", \"next_stop\" : 19, \"stop_type\"\
    \ : \"\", \"a_time\" : \"14:00\"},  '\n                           '{\"bus_id\"\
    \ : 1024, \"stop_id\" : 21, \"stop_name\" : \"Karlikowska Avenue\", \"next_stop\"\
    \ : 12, \"stop_type\" : \"S\", \"a_time\" : \"13:01\"},  '\n                 \
    \          '{\"bus_id\" : 1024, \"stop_id\" : 12, \"stop_name\" : \"Sesame Street\"\
    , \"next_stop\" : 0, \"stop_type\" : \"F\", \"a_time\" : \"14:00\"},  '\n    \
    \                       '{\"bus_id\" : 512, \"stop_id\" : 19, \"stop_name\" :\
    \ \"Prospekt Avenue\", \"next_stop\" : 0, \"stop_type\" : \"F\", \"a_time\" :\
    \ \"14:11\"}]',\n                     attach=(0, 0, 0, 0)),\n            TestCase(stdin='[{\"\
    bus_id\" : 128, \"stop_id\" : 1, \"stop_name\" : \"Fifth Avenue\", \"next_stop\"\
    \ : 4, \"stop_type\" : \"S\", \"a_time\" : \"08:12\"}, '\n                   \
    \        '{\"bus_id\" : 128, \"stop_id\" : 4, \"stop_name\" : \"abbey Road\",\
    \ \"next_stop\" : 5, \"stop_type\" : \"FF\", \"a_time\" : \"08:19\"},  '\n   \
    \                        '{\"bus_id\" : 128, \"stop_id\" : 5, \"stop_name\" :\
    \ \"Santa Monica Boulevard\", \"next_stop\" : 8, \"stop_type\" : \"O\", \"a_time\"\
    \ : \"two\"},  '\n                           '{\"bus_id\" : 128, \"stop_id\" :\
    \ 8, \"stop_name\" : \"Elm Street Str.\", \"next_stop\" : 11, \"stop_type\" :\
    \ \"\", \"a_time\" : \"08:37\"},  '\n                           '{\"bus_id\" :\
    \ 128, \"stop_id\" : 11, \"stop_name\" : \"Beale Street\", \"next_stop\" : 12,\
    \ \"stop_type\" : \"\", \"a_time\" : \"39:20\"},  '\n                        \
    \   '{\"bus_id\" : 128, \"stop_id\" : 12, \"stop_name\" : \"Sesame Street\", \"\
    next_stop\" : 14, \"stop_type\" : \"\", \"a_time\" : \"09:95\"},  '\n        \
    \                   '{\"bus_id\" : 128, \"stop_id\" : 14, \"stop_name\" : \"Bourbon\
    \ street\", \"next_stop\" : 19, \"stop_type\" : \"O\", \"a_time\" : \"09:59\"\
    },  '\n                           '{\"bus_id\" : 128, \"stop_id\" : 19, \"stop_name\"\
    \ : \"Avenue\", \"next_stop\" : 0, \"stop_type\" : \"F\", \"a_time\" : \"10:12\"\
    },  '\n                           '{\"bus_id\" : 256, \"stop_id\" : 2, \"stop_name\"\
    \ : \"Pilotow Street\", \"next_stop\" : 3, \"stop_type\" : \"S\", \"a_time\" :\
    \ \"08.13\"},  '\n                           '{\"bus_id\" : 256, \"stop_id\" :\
    \ 3, \"stop_name\" : \"Startowa Street\", \"next_stop\" : 8, \"stop_type\" : \"\
    d\", \"a_time\" : \"08:16\"},  '\n                           '{\"bus_id\" : 256,\
    \ \"stop_id\" : 8, \"stop_name\" : \"Elm\", \"next_stop\" : 10, \"stop_type\"\
    \ : \"\", \"a_time\" : \"08:29\"},  '\n                           '{\"bus_id\"\
    \ : 256, \"stop_id\" : 10, \"stop_name\" : \"Lombard Street\", \"next_stop\" :\
    \ 12, \"stop_type\" : \"\", \"a_time\" : \"08;44\"},  '\n                    \
    \       '{\"bus_id\" : 256, \"stop_id\" : 12, \"stop_name\" : \"Sesame Street\"\
    , \"next_stop\" : 13, \"stop_type\" : \"O\", \"a_time\" : \"08:46\"},  '\n   \
    \                        '{\"bus_id\" : 256, \"stop_id\" : 13, \"stop_name\" :\
    \ \"Orchard Road\", \"next_stop\" : 16, \"stop_type\" : \"\", \"a_time\" : \"\
    09:13\"},  '\n                           '{\"bus_id\" : 256, \"stop_id\" : 16,\
    \ \"stop_name\" : \"Sunset Boullevard\", \"next_stop\" : 17, \"stop_type\" : \"\
    O\", \"a_time\" : \"09:26\"},  '\n                           '{\"bus_id\" : 256,\
    \ \"stop_id\" : 17, \"stop_name\" : \"Khao San Road\", \"next_stop\" : 20, \"\
    stop_type\" : \"o\", \"a_time\" : \"10:25\"},  '\n                           '{\"\
    bus_id\" : 256, \"stop_id\" : 20, \"stop_name\" : \"Michigan Avenue\", \"next_stop\"\
    \ : 0, \"stop_type\" : \"F\", \"a_time\" : \"11:26\"},  '\n                  \
    \         '{\"bus_id\" : 512, \"stop_id\" : 6, \"stop_name\" : \"Arlington Road\"\
    , \"next_stop\" : 7, \"stop_type\" : \"s\", \"a_time\" : \"11:06\"},  '\n    \
    \                       '{\"bus_id\" : 512, \"stop_id\" : 7, \"stop_name\" : \"\
    Parizska St.\", \"next_stop\" : 8, \"stop_type\" : \"\", \"a_time\" : \"11:15\"\
    },  '\n                           '{\"bus_id\" : 512, \"stop_id\" : 8, \"stop_name\"\
    \ : \"Elm Street\", \"next_stop\" : 9, \"stop_type\" : \"\", \"a_time\" : \"11:76\"\
    },  '\n                           '{\"bus_id\" : 512, \"stop_id\" : 9, \"stop_name\"\
    \ : \"Niebajka Av.\", \"next_stop\" : 15, \"stop_type\" : \"\", \"a_time\" : \"\
    12:20\"},  '\n                           '{\"bus_id\" : 512, \"stop_id\" : 15,\
    \ \"stop_name\" : \"Jakis Street\", \"next_stop\" : 16, \"stop_type\" : \"\",\
    \ \"a_time\" : \"12:44\"},  '\n                           '{\"bus_id\" : 512,\
    \ \"stop_id\" : 16, \"stop_name\" : \"Sunset Boulevard\", \"next_stop\" : 18,\
    \ \"stop_type\" : \"\", \"a_time\" : \"13:01\"},  '\n                        \
    \   '{\"bus_id\" : 512, \"stop_id\" : 18, \"stop_name\" : \"Jakas Avenue\", \"\
    next_stop\" : 19, \"stop_type\" : \"\", \"a_time\" : \"14:00\"},  '\n        \
    \                   '{\"bus_id\" : 1024, \"stop_id\" : 21, \"stop_name\" : \"\
    Karlikowska Avenue\", \"next_stop\" : 12, \"stop_type\" : \"S\", \"a_time\" :\
    \ \"13:01\"},  '\n                           '{\"bus_id\" : 1024, \"stop_id\"\
    \ : 12, \"stop_name\" : \"Sesame Street\", \"next_stop\" : 0, \"stop_type\" :\
    \ \"F\", \"a_time\" : \"14:00:00\"},  '\n                           '{\"bus_id\"\
    \ : 1024, \"stop_id\" : 19, \"stop_name\" : \"Prospekt Avenue\", \"next_stop\"\
    \ : 0, \"stop_type\" : \"F\", \"a_time\" : \"14:11\"}]',\n                   \
    \ attach=(19, 8, 4, 7)),\n        ]\n\n    def check(self, reply: str, result)\
    \ -> CheckResult:\n        query = \"\".join([\"[\\\\D]*\" + str(result[x]) for\
    \ x in range(4)])\n        if not re.match(rf'^{query}$', reply.strip()):\n  \
    \          return CheckResult.wrong(\"A wrong number of bugs was detected. Expected\
    \ output:\\n\\n\" \n                                     f\"Format validation:\
    \ {result[0]} errors\\n\"\n                                     f\"stop_name:\
    \ {result[1]}\\n\"\n                                     f\"stop_type: {result[2]}\\\
    n\"\n                                     f\"a_time: {result[3]}\")\n        return\
    \ CheckResult.correct()\n\n\nif __name__ == '__main__':\n    EasyRiderStage2('easyrider.easyrider').run_tests()\n"
    learner_created: false
  - name: tests.py
    visible: false
    text: |-
      from test.tests import EasyRiderStage2
      
      if __name__ == '__main__':    EasyRiderStage2('easyrider.easyrider').run_tests()
    learner_created: false
  - name: easyrider/utils.py
    visible: true
    text: |
      import json
      from collections import defaultdict
      
      
      class Validator:
          BUS_ID_REGEX = ""
          STOP_ID_REGEX = ""
          STOP_NAME_REGEX = ""
          NEXT_STOP_REGEX = ""
          STOP_TYPE_REGEX = ""
          A_TIME_REGEX = ""
      
          def __init__(self, json_data: str):
              self.raw_json = json_data
              self.json: list = json.loads(self.raw_json)
              (self.bus_ids,
               self.stop_ids,
               self.stop_names,
               self.next_stops,
               self.stop_types,
               self.a_times) = self.extract_fields()
      
              self.errors = defaultdict(lambda: defaultdict(int))
      
          def extract_fields(self):
              return (
                  [(idx, val["bus_id"]) for idx, val in enumerate(self.json)],
                  [(idx, val["stop_id"]) for idx, val in enumerate(self.json)],
                  [(idx, val["stop_name"]) for idx, val in enumerate(self.json)],
                  [(idx, val["next_stop"]) for idx, val in enumerate(self.json)],
                  [(idx, val["stop_type"]) for idx, val in enumerate(self.json)],
                  [(idx, val["a_time"]) for idx, val in enumerate(self.json)]
              )
      
          def validate_fields(self):
              self.bus_id_validator()
              self.stop_id_validator()
              self.stop_name_validator()
              self.next_stop_validator()
              self.stop_type_validator()
              self.a_time_validator()
      
          def report_errors(self):
              total_type_errors = sum([v["type"] for v in self.errors.values()])
              total_required_errors = sum([v["required"] for v in self.errors.values()])
      
              field_errors = defaultdict(int)
              for k, v in self.errors.items():
                  field_errors[k] = sum([v["type"], v["required"]])
      
              print(f"""
      Type and required field validation: {total_type_errors + total_required_errors} errors
      bus_id: {field_errors["bus_id"]}
      stop_id: {field_errors["stop_id"]}
      stop_name: {field_errors["stop_name"]}
      next_stop: {field_errors["next_stop"]}
      stop_type: {field_errors["stop_type"]}
      a_time: {field_errors["a_time"]}""")
      
          # field/db column validators
          def bus_id_validator(self):
              # integer
              for val in self.bus_ids:
                  if val[1] and not isinstance(val[1], int):
                      self.errors["bus_id"]["type"] += 1
      
                  if val[1] == "":
                      self.errors["bus_id"]["required"] += 1
      
          def stop_id_validator(self):
              # integer
              for val in self.stop_ids:
                  if val[1] and not isinstance(val[1], int):
                      self.errors["stop_id"]["type"] += 1
      
                  if val[1] == "":
                      self.errors["stop_id"]["required"] += 1
      
          def stop_name_validator(self):
              # string
              for val in self.stop_names:
                  if val[1] and not isinstance(val[1], str):
                      self.errors["stop_name"]["type"] += 1
      
                  if val[1] == "":
                      self.errors["stop_name"]["required"] += 1
      
          def next_stop_validator(self):
              # integer
              for val in self.next_stops:
                  if val[1] and not isinstance(val[1], int):
                      self.errors["next_stop"]["type"] += 1
      
                  if val[1] == "":
                      self.errors["next_stop"]["required"] += 1
      
          def stop_type_validator(self):
              # char (string of len 1)
              for val in self.stop_types:
                  if val[1]:
                      if (not isinstance(val[1], str)) or (isinstance(val[1], str) and len(val[1]) != 1):
                          self.errors["stop_type"]["type"] += 1
      
          def a_time_validator(self):
              # string
              for val in self.a_times:
                  if val[1] and not isinstance(val[1], str):
                      self.errors["a_time"]["type"] += 1
      
                  if val[1] == "":
                      self.errors["a_time"]["required"] += 1
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/10889#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 26 Dec 2023 00:46:26 UTC"
record: 2
